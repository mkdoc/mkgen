var through = require('through3')
  , mkast = require('mkast')
  , Serialize = require('mkast/lib/serialize')
  , Node = mkast.Node
  , parser = new mkast.Parser()
  , MSG = 'Generated by [mkdoc](https://github.com/mkdoc/mkdoc).'

/**
 *  Stream transform.
 *
 *  @private
 */
function generator(node, prepend) {
  var sent = false
    , open = 0;

  function transform(chunk, encoding, cb) {

    if(chunk.is(Node.DOCUMENT)) {
      open++; 
    }

    if(chunk.is(Node.EOF)) {
      if(open) {
        open--; 
      }
    }

    // append to end before last eof node
    if(!sent && !prepend && chunk.is(Node.EOF) && open === 0) {
      this.push(node);
      this.push(Node.createNode(Node.EOF));
      sent = true;
    }

    this.push(chunk);

    // prepend to start after first document node
    if(!sent && prepend && chunk.is(Node.DOCUMENT)) {
      this.push(node);
      this.push(Node.createNode(Node.EOF));
      sent = true;
    }

    cb();
  }

  var Generator = through.transform(transform);
  return new Generator();
}

/**
 *  Append or prepend a message string.
 *
 *  The message string is parsed as markdown and written to the end of the 
 *  document unless `prepend` is given.
 *
 *  The document node itself is omitted; it's content nodes are written to 
 *  the stream.
 *
 *  @function gen
 *  @param {Object} [opts] processing options.
 *  @param {Function} [cb] callback function.
 *
 *  @option {Readable=process.stdin} [input] input stream.
 *  @option {Writable=process.stdout} [output] output stream.
 *  @option {String} [message] generator message.
 *  @option {Boolean} [prepend] prepend message to the stream.
 *
 *  @returns an output stream.
 */
function gen(opts, cb) {

  /* istanbul ignore next: always pass options in test specs */
  opts = opts || {};
  /* istanbul ignore next: never use process streams in test specs */
  opts.input = opts.input || process.stdin;
  /* istanbul ignore next: never use process streams in test specs */
  opts.output = opts.output || process.stdout;

  var message = opts.message || MSG
    , node = parser.parse(message);

  var stream = generator(node, opts.prepend)
    , serialize = new Serialize();

  // pass through stream, we append or prepend
  mkast.parser(opts.input, {wrap: true})
  //mkast.deserialize(opts.input)
    .pipe(stream)
    .pipe(serialize)
    .pipe(opts.output);

  if(cb) {
    opts.output
      .once('error', cb)
      .once('finish', cb);
  }

  return opts.output;
}

module.exports = gen;
